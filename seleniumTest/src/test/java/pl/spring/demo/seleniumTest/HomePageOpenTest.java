package pl.spring.demo.seleniumTest;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import org.junit.Assert;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import pl.spring.demo.seleniumTest.pages.HomePage;
import pl.spring.demo.seleniumTest.site.Site;
import pl.spring.demo.seleniumTest.testCore.SeleniumTestCase;

public class HomePageOpenTest extends SeleniumTestCase {
	 
	 @Autowired
	 private Site site;
	 
	 
	 
	 @Test
	 public void testStarterKit() {
		final String ex="Starter KIT"; 
		HomePage home=site.gotoHomePage();
		String text=home.getStarterKitLink().getText();

		Assert.assertEquals(ex, text);
		
	 }
	 
	 @Test
	 public void testSiteAdress() {
		HomePage home=site.gotoHomePage();
		Assert.assertEquals(home.getAdress(), site.getCurrentAdress());
		
	 }
	 
	 @Test
	 public void testLinkInNavBar() {
		HomePage home=site.gotoHomePage();
		List<String> linksForCheck= new ArrayList<String>();
		linksForCheck.add(site.getServiceAdress()+site.getBookList());
		linksForCheck.add(site.getServiceAdress()+site.getAuthorList());
		linksForCheck.add(site.getServiceAdress()+site.getComponent1());
		linksForCheck.add(site.getServiceAdress()+site.getComponent2());
		List<String>linksInElement= home.getNavbarLinks().stream().map(x->x.getAttribute("href")).collect(Collectors.toList());
		Boolean pageContainsDesiredLinks=linksInElement.containsAll(linksForCheck);
		
		Assert.assertTrue(pageContainsDesiredLinks);	
	 }
	 
	 @Test
	 public void testListLinks() {
		HomePage home=site.gotoHomePage();
		List<String> linksForCheck= new ArrayList<String>();
		linksForCheck.add(site.getServiceAdress()+site.getBookList());
		linksForCheck.add(site.getServiceAdress()+site.getAuthorList());
		linksForCheck.add(site.getServiceAdress()+site.getComponent1());
		linksForCheck.add(site.getServiceAdress()+site.getComponent2());
		List<String>linksInElement= home.getListDialog().stream().map(x->x.getAttribute("href")).collect(Collectors.toList());
		Boolean pageContainsDesiredLinks=linksInElement.containsAll(linksForCheck);

		Assert.assertTrue(pageContainsDesiredLinks);
	 }
	 
	 
	}